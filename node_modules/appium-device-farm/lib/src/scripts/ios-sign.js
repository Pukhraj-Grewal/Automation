"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const fs_1 = __importDefault(require("fs"));
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const applesign_1 = __importDefault(require("applesign"));
const archiver_1 = __importDefault(require("archiver"));
const yargs_1 = __importDefault(require("yargs/yargs"));
const helpers_1 = require("yargs/helpers");
const listr_1 = __importDefault(require("listr"));
const ios_mobileprovision_finder_1 = require("ios-mobileprovision-finder");
const os_1 = __importDefault(require("os"));
const rxjs_1 = require("rxjs");
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const prompts_1 = require("@inquirer/prompts");
const execAsync = util_1.default.promisify(child_process_1.exec);
const WDA_BUILD_PATH = '/appium_wda_ios/Build/Products/Debug-iphoneos';
const PROVISION_FILE_PATH_PREFIX = path_1.default.join(os_1.default.homedir(), 'Library/MobileDevice/Provisioning Profiles');
const getOptions = () => __awaiter(void 0, void 0, void 0, function* () {
    const argv = yield (0, yargs_1.default)((0, helpers_1.hideBin)(process.argv)).options({
        'mobile-provisioning-file': {
            desc: 'Path to the mobile provisioning file which is used to sign the webdriver agent',
            type: 'string',
        },
        'wda-project-path': {
            desc: 'Path to webdriver agent xcode project',
            type: 'string',
        },
    }).argv;
    return {
        mobileProvisioningFile: argv.mobileProvisioningFile,
        wdaProjectPath: argv.wdaProjectPath,
    };
});
const getMobileProvisioningFile = (mobileProvisioningFile) => __awaiter(void 0, void 0, void 0, function* () {
    if (mobileProvisioningFile) {
        if (!fs_1.default.existsSync(mobileProvisioningFile) || !fs_1.default.statSync(mobileProvisioningFile).isFile()) {
            throw new Error(`Mobile provisioning file ${mobileProvisioningFile} does not exists`);
        }
        return mobileProvisioningFile;
    }
    else {
        const provisioningFiles = ios_mobileprovision_finder_1.provision.read();
        if (!provisioningFiles || !provisioningFiles.length) {
            throw new Error('No mobileprovision file found on the machine');
        }
        const prompt = yield (0, prompts_1.select)({
            message: 'Select the mobileprovision to use for signing',
            choices: provisioningFiles.map((file) => ({
                value: file.UUID,
                name: `${file.Name.split(':')[1] || file.Name} (Team: ${file.TeamName}) (${file.UUID})`,
            })),
        });
        return path_1.default.join(PROVISION_FILE_PATH_PREFIX, `${prompt}.mobileprovision`);
    }
});
const getWdaProject = (wdaProjectPath) => __awaiter(void 0, void 0, void 0, function* () {
    if (wdaProjectPath) {
        if (!fs_1.default.existsSync(wdaProjectPath) || !fs_1.default.statSync(wdaProjectPath).isDirectory()) {
            throw new Error(`Unable to find webdriver agent project in path ${wdaProjectPath}`);
        }
        return wdaProjectPath;
    }
    try {
        const { stdout } = yield execAsync('find $HOME/.appium -name WebDriverAgent.xcodeproj');
        return path_1.default.dirname(stdout.trim());
    }
    catch (err) {
        throw new Error('Unable to find WebDriverAgent project');
    }
});
/* Task definintions */
function buildWebDriverAgent(projectDir, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const buildCommand = 'xcodebuild clean build-for-testing -project WebDriverAgent.xcodeproj -derivedDataPath appium_wda_ios -scheme WebDriverAgentRunner -destination generic/platform=iOS CODE_SIGNING_ALLOWED=NO';
            logger(buildCommand);
            yield execAsync(buildCommand, { cwd: projectDir, maxBuffer: undefined });
            return `${projectDir}/${WDA_BUILD_PATH}/WebDriverAgentRunner-Runner.app`;
        }
        catch (error) {
            throw new Error(`❌ Error building WebDriverAgent: ${error === null || error === void 0 ? void 0 : error.message}`);
        }
    });
}
function zipPayloadDirectory(outputZipPath, folderPath, observer) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            const output = fs_1.default.createWriteStream(outputZipPath);
            const archive = (0, archiver_1.default)('zip', { zlib: { level: 9 } });
            output.on('close', () => {
                observer.next(`Zipped ${archive.pointer()} total bytes`);
                observer.next(`Archive has been written to ${outputZipPath}`);
                resolve();
            });
            archive.on('error', (err) => {
                reject(err);
            });
            archive.pipe(output);
            archive.directory(folderPath, 'Payload');
            archive.finalize();
        });
    });
}
(() => __awaiter(void 0, void 0, void 0, function* () {
    const cliOptions = yield getOptions();
    const mobileProvisioningFile = yield getMobileProvisioningFile(cliOptions.mobileProvisioningFile);
    const tasks = new listr_1.default([
        {
            title: '🔍 Searching for WebDriverAgent.xcodeproj',
            task: (context, task) => __awaiter(void 0, void 0, void 0, function* () {
                context.wdaProjectPath = yield getWdaProject(cliOptions.wdaProjectPath);
                task.title = `Found WebDriverAgent.xcodeproj at: ${context.wdaProjectPath}`;
            }),
        },
        {
            title: '🏗️ Building WebDriverAgent',
            task: (context, task) => {
                return new rxjs_1.Observable((observer) => {
                    buildWebDriverAgent(context.wdaProjectPath, observer.next.bind(observer)).then((wdaAppPath) => {
                        context.wdaAppPath = wdaAppPath;
                        task.title = 'Successfully built WebDriverAgent';
                        observer.complete();
                    });
                });
            },
        },
        {
            title: 'Preparing webdrivergaent ipa',
            task: (context) => {
                return new rxjs_1.Observable((observer) => {
                    const wdaBuildPath = path_1.default.join(context.wdaProjectPath, WDA_BUILD_PATH);
                    const payloadDirectory = path_1.default.join(wdaBuildPath, 'Payload');
                    observer.next('Removing framework directory');
                    fs_1.default.readdirSync(`${context.wdaAppPath}/Frameworks`).forEach((f) => fs_1.default.rmSync(`${context.wdaAppPath}/Frameworks/${f}`, { recursive: true }));
                    observer.next('Creating Payload directory');
                    execAsync(`mkdir -p ${payloadDirectory}`)
                        .then(() => {
                        observer.next('Payload directory created successfully');
                    })
                        .then(() => {
                        observer.next('🚚 Moving .app file to Payload directory...');
                        return execAsync(`mv ${context.wdaAppPath} ${payloadDirectory}`);
                    })
                        .then(() => {
                        observer.next('Packing Payload directory...');
                        return zipPayloadDirectory(`${wdaBuildPath}/wda-resign.zip`, payloadDirectory, observer);
                    })
                        .then(() => observer.complete());
                });
            },
        },
        {
            title: 'Signing WebDriverAgent ipa',
            task: (context, task) => __awaiter(void 0, void 0, void 0, function* () {
                const wdaBuildPath = path_1.default.join(context.wdaProjectPath, WDA_BUILD_PATH);
                const ipaPath = `${wdaBuildPath}/wda-resign.ipa`;
                const as = new applesign_1.default({
                    mobileprovision: mobileProvisioningFile,
                    outfile: ipaPath,
                });
                yield as.signIPA(path_1.default.join(wdaBuildPath, 'wda-resign.zip'));
                task.title = `Successfully signed WebDriverAgent file  ${ipaPath}`;
            }),
        },
    ], { exitOnError: true });
    yield tasks.run();
}))();
